ctmc

// Enforce using multiple modules by computing same thing
// No deadlock, no loop. Main loop with second state which can
// go to 'wrong' state checked in properties or go to "final" state
// but with a loop at the end

// Note that loop involves synchronized module and
// there is a 'false loop' with two possible updates, one looping
// with probability of 90%. It checks that a false 'loop' is not called
// because number of active transitions has not been computed correctly
// when sum of rates is prefered for CTMCs. It may equal to one, but it does
// not indicate a loop. Verify a regression bug.

// P=? [F t=1] - non-zero and always verified (loop)
// P=? [t!=1 U t=3] - non-zero

module first
	s : [0..2] init 0;
	
	[main_loop] s = 0 -> 1.0 : (s'= 1);
	//enter wrong state
	[wrong_state] s = 1 -> 1.0 : (s'= 2);
	[wrong_state] s = 2 -> 1.0 : (s'= 1);
	// false loop
	[false_loop] s = 1 -> 1.0 : (s'= 1);
	// looping final state
	[final_state] s = 1 -> 1.0 : (s'= 2);
	[final_state] s = 2 -> 1.0 : (s'= 2);
endmodule

module second
	t : [0..3] init 0;
	// return to general state
	[wrong_state] t = 0 -> 1.0 : (t'= 1);
	[wrong_state] t = 1 -> 1.0 : (t'= 0) ;
	// return to general state
	[false_loop] t = 0 -> 1.0 : (t'= 2);
	[false_loop] t = 2 -> 0.1 : (t'= 0);
	[false_loop] t = 2 -> 0.9 : (t'= 2);
	// loop
	[final_state] t = 0 -> 0.9 : (t'= 3) + 0.1 : (t'= 0);
	[final_state] t = 3 -> 1.0 : (t'= 3);
endmodule